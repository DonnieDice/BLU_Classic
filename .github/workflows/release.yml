name: Package and Release

on:
  push:
    tags:
      - 'v*'  # Triggers only on version tags like v1.0.0, v1.0.0-alpha, etc.

env:
  CF_API_KEY: ${{ secrets.CF_API_KEY }}
  WOWI_API_TOKEN: ${{ secrets.WOWI_API_TOKEN }}
  WAGO_API_TOKEN: ${{ secrets.WAGO_API_TOKEN }}
  GITHUB_OAUTH: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Clone Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git user
        run: |
          git config --global user.name "donniedice"
          git config --global user.email "donniedice@protonmail.com"

      - name: Set Release Type
        id: set_release_type
        run: |
          TAG_NAME=${{ github.ref }}
          if [[ "$TAG_NAME" == *"beta"* ]]; then
            echo "release_type=beta" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == *"alpha"* ]]; then
            echo "release_type=alpha" >> $GITHUB_OUTPUT
          else
            echo "release_type=release" >> $GITHUB_OUTPUT
          fi

      - name: Extract Version from TOC
        id: extract_version
        run: |
          version=$(grep -oP '^## Version: \K(.*)' ./*.toc | head -1)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Package and Release
        uses: BigWigsMods/packager@master
        with:
          release-type: ${{ steps.set_release_type.outputs.release_type }}

      - name: Send Discord Notification
        if: success()
        env:
          DISCORD_WEBHOOK: https://discord.com/api/webhooks/1404619741997563965/W99EcO9tGg1b9hz7rHYyHRJfsL1oeN1vOt0MMMOlsra5oGUDzbviiyILbKwnpxCvYZyJ
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          ADDON_NAME="BLU Classic"
          CURSEFORGE_URL="https://www.curseforge.com/wow/addons/blu-classic"
          WOWINTERFACE_URL="https://www.wowinterface.com/downloads/info26792-BLUClassic.html"
          WAGO_URL="https://addons.wago.io/addons/blu-classic"
          GITHUB_URL="https://github.com/DonnieDice/BLU_Classic/releases/tag/${TAG_NAME}"
          
          # Extract release notes from CHANGELOG.md for this version
          # Look for the section between this version and the next version header
          RELEASE_NOTES=$(awk "/^## \[?${TAG_NAME}\]?/{flag=1; next} /^## \[?v[0-9]+\.[0-9]+\.[0-9]+\]?/{if(flag) exit} flag" CHANGELOG.md | head -20)
          
          # Format release notes for Discord (limit to 1024 chars for Discord embed field limit)
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="No release notes available."
          else
            # Truncate if too long and add ellipsis
            if [ ${#RELEASE_NOTES} -gt 1000 ]; then
              RELEASE_NOTES="${RELEASE_NOTES:0:1000}..."
            fi
          fi
          
          # Escape special characters for JSON
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          
          # Create Discord embed JSON
          cat << EOF > discord_payload.json
          {
            "embeds": [{
              "title": "üéÆ ${ADDON_NAME} ${TAG_NAME} Released!",
              "description": "A new version of **${ADDON_NAME}** has been released!",
              "color": 393471,
              "fields": [
                {
                  "name": "üìù Release Notes",
                  "value": "${RELEASE_NOTES}",
                  "inline": false
                },
                {
                  "name": "üì¶ Download Links",
                  "value": "[CurseForge](${CURSEFORGE_URL})\n[WoWInterface](${WOWINTERFACE_URL})\n[Wago](${WAGO_URL})\n[GitHub](${GITHUB_URL})",
                  "inline": false
                },
                {
                  "name": "üéµ Features",
                  "value": "Experience level-up sounds from your favorite games in WoW!",
                  "inline": false
                }
              ],
              "footer": {
                "text": "RGX Mods - RealmGX Community Project"
              },
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }]
          }
          EOF
          
          # Send to Discord
          curl -X POST "${DISCORD_WEBHOOK}" \
            -H "Content-Type: application/json" \
            -d @discord_payload.json